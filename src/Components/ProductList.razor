@using ContosoCrafts.WebSite.Models
@using ContosoCrafts.WebSite.Services
@using Microsoft.AspNetCore.Components.Web
@inject JsonFileProductService ProductService

<!-- Search section -->
<div>
    <div class="input-group mb-3">
        <div class="input-group-prepend">
            <span class="input-group-text search-icon" id="basic-addon1"><i class="fa-solid fa-magnifying-glass"></i></span>
        </div>
        <input @bind="searchKeywords" type="text" class="form-control search-input" placeholder="Seach">
        <div class="input-group-append">
            <button @onclick="CleanSearchInput" class="btn search-input" type="button"><i class="fa-solid fa-xmark"></i></button>
            <button @onclick="Search" class="btn search-btn" type="button"><i class="fa-solid fa-magnifying-glass"></i></button>
        </div>
    </div>
</div>

<!-- Banner Carousel Section: A slideshow of anime banners that automatically cycles -->
<div id="animeCarousel" class="carousel slide" data-ride="carousel">
    <!-- Indicators for switching between banners -->
    <!-- Each 'li' represents an indicator dot for a specific slide (0-3) -->
    <ol class="carousel-indicators">
        <li data-target="#animeCarousel" data-slide-to="0" class="active"></li>
        <li data-target="#animeCarousel" data-slide-to="1"></li>
        <li data-target="#animeCarousel" data-slide-to="2"></li>
        <li data-target="#animeCarousel" data-slide-to="3"></li>
    </ol>

    <!-- Carousel inner container holding the banners -->
    <!-- Each 'carousel-item' represents a different banner in the slideshow -->
    <div class="carousel-inner">

        <!-- First banner -->
        <!-- 'active' class sets this as the default banner displayed first -->
        <div class="carousel-item active">
            <img class="d-block w-100" src="/Images/Banner_1.png" alt="First slide">
            <div class="carousel-caption d-none d-md-block">
                <h5>Jujutsu Kaisen</h5>
                <p>Yuji Itadori enters the dangerous world of curses after consuming a powerful cursed object, facing dark forces alongside skilled Jujutsu sorcerers.</p>
            </div>
        </div>

        <!-- Second banner -->
        <!-- This slide will appear after the first banner either through auto-rotation or manual control -->
        <div class="carousel-item">
            <img class="d-block w-100" src="/Images/Banner_2.png" alt="Second slide">
            <div class="carousel-caption d-none d-md-block">
                <h5>Blue Lock</h5>
                <p>In a quest to create Japan's ultimate striker, elite players compete in a cutthroat training facility, where only the strongest survive to claim their spot on the national team.</p>
            </div>
        </div>

        <!-- Third banner -->
        <div class="carousel-item">
            <img class="d-block w-100" src="/Images/Banner_3.png" alt="Third slide">
            <!-- Caption overlay on top of the image -->
            <div class="carousel-caption d-none d-md-block">
                <h5>Demon Slayer</h5>
                <p>Witness the rise of Tanjiro as he joins the Demon Slayer Corps, facing terrifying foes while uncovering the mysteries of the demon world</p>
            </div>
        </div>

        <!-- Fourth banner -->
        <div class="carousel-item">
            <img class="d-block w-100" src="/Images/Banner_4.png" alt="Fourth slide">
            <div class="carousel-caption d-none d-md-block">
                <h5>Haikyuu!!</h5>
                <p>An exhilarating journey of underdogs rising to the top—volleyball is more than just a game for Hinata and his team</p>
            </div>
        </div>
    </div>

    <!-- Navigation Controls: Allow users to move between banners -->
    <!-- Previous slide button -->
    <a class="carousel-control-prev" href="#animeCarousel" role="button" data-slide="prev">
        <!-- Icon for the previous button (left arrow) -->
        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
        <span class="sr-only">Previous</span>
    </a>

    <!-- Next slide button -->
    <a class="carousel-control-next" href="#animeCarousel" role="button" data-slide="next">
        <!-- Icon for the next button (right arrow) -->
        <span class="carousel-control-next-icon" aria-hidden="true"></span>
        <span class="sr-only">Next</span>
    </a>
</div>

<!-- Audio Element for Background Music -->
<audio id="bg-music" autoplay loop>
    <!-- Specifying the path and type of audio file -->
    <source src="Audio/Warrior.mp3" type="audio/mp3">
    <!-- Fallback message for browsers that do not support the audio element -->
    Your browser does not support the audio element.
</audio>

<!-- Music Controls for Play/Pause and Next Song -->
<div id="audio-controls">
    <!-- Play Icon: Starts playing the currently loaded audio when clicked -->
    <i class="fas fa-play" onclick="playAudio()" id="play-icon" style="cursor: pointer;"></i>
    <!-- Pause Icon: Pauses the currently playing audio when clicked -->
    <i class="fas fa-pause" onclick="pauseAudio()" id="pause-icon" style="cursor: pointer;"></i>
    <span id="music-label">Music</span>
    <!-- Next Song Icon: Advances to the next song in the playlist when clicked -->
    <i class="fas fa-forward" onclick="nextSong()" id="next-song-icon"></i>
</div>

<!-- Floating Display for Current Song Name -->
<div id="song-name-display" style="position: fixed; bottom: 10px; right: 10px; background-color: rgba(0,0,0,0.7); color: white; padding: 5px 10px; border-radius: 5px; display: none;">
    <!-- Music Icon: Visual indicator that music is currently playing -->
    <i class="fas fa-music"></i>
    <!-- Element to Show Song Name -->
    <span id="song-name"></span>
</div>

<div class="card-columns">
    @foreach (var product in ProductService.GetAllData())
    {
        <div class="card">
            <div class="card-img" style="background-image: url('@product.Image');">
            </div>
            <div class="card-body">
                <h5 class="card-title">@product.Title</h5>
            </div>
            <div class="card-footer">
                <div class="d-flex justify-content-between">
                    <button @onclick="(e => SelectProduct(product.Id))"
                            data-toggle="modal" data-target="#productModal" class="btn btn-primary">
                        More Info
                    </button>
                    <a href="@product.Trailer" target="_blank" class="btn btn-secondary btn-watch-trailer"> Watch Trailer</a>
                </div>
            </div>
        </div>
    }
</div>

@if (selectedProduct != null)
{
    <div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content @((selectedProductId != null) ? "black-bg" : "")">
                <div class="modal-header">
                    <h5 class="modal-title" id="productTitle">@selectedProduct.Title</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="card">
                        <div class="card-img" style="background-image: url('@selectedProduct.Image');">
                        </div>
                        <div class="card-body">
                            <p class="card-text">@selectedProduct.Description</p>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    @if (voteCount == 0)
                    {
                        <span>Be the first to vote!</span>
                    }
                    @if (voteCount != 0)
                    {
                        <span>@voteCount @voteLabel</span>
                    }
                    @for (int i = 1; i < 6; i++)
                    {
                        var currentStar = i;
                        if (i <= currentRating)
                        {
                            <span class="fa fa-star checked" @onclick="(e => SubmitRating(currentStar))"></span>
                        }
                        if (i > currentRating)
                        {
                            <span class="fa fa-star" @onclick="(e => SubmitRating(currentStar))"></span>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

@code
{
    ProductModel selectedProduct = new ProductModel();
    string selectedProductId;
    Dictionary<string, bool> voteTracker = new Dictionary<string, bool>();

    void SelectProduct(string productId)
    {
        selectedProductId = productId;
        selectedProduct = ProductService.GetAllData().First(x => x.Id == productId);
        GetCurrentRating();
    }

    int currentRating = 0;
    int voteCount = 0;
    string voteLabel;

    void GetCurrentRating()
    {
        if (selectedProduct.Ratings == null)
        {
            currentRating = 0;
            voteCount = 0;
        }
        if (selectedProduct.Ratings != null)
        {
            voteCount = selectedProduct.Ratings.Count();
            voteLabel = voteCount > 1 ? "Votes" : "Vote";
            currentRating = selectedProduct.Ratings.Sum() / voteCount;
        }

        System.Console.WriteLine($"Current rating for {selectedProduct.Id}: {currentRating}");
    }

    void SubmitRating(int rating)
    {
        if (!voteTracker.ContainsKey(selectedProductId))
        {
            System.Console.WriteLine($"Rating received for {selectedProduct.Id}: {rating}");
            ProductService.AddRating(selectedProductId, rating);
            voteTracker[selectedProductId] = true;
            SelectProduct(selectedProductId);
        }

        if (voteTracker.ContainsKey(selectedProductId) && !voteTracker[selectedProductId])
        {
            System.Console.WriteLine($"Rating received for {selectedProduct.Id}: {rating}");
            ProductService.AddRating(selectedProductId, rating);
            voteTracker[selectedProductId] = true;
            SelectProduct(selectedProductId);
        }

        if (voteTracker.ContainsKey(selectedProductId) && voteTracker[selectedProductId])
        {
            voteLabel = "You already voted";
            System.Console.WriteLine(voteLabel);
        }
    }
}